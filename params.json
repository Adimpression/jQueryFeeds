{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Jquery-feeds","tagline":"Multiple RSS feeds aggregator with templating and cross-domain support.","body":"jQuery Feeds - RSS aggregator for your site\r\n===========================================\r\n\r\nUse the jQuery Feeds Plugin to retrieve and display multiple RSS feeds' entries in chronological order.\r\n\r\nFeatures\r\n--------\r\n\r\n- Fetches multiple feeds\r\n- Entries are combined and displayed in chronological order\r\n- Fully customizable markup\r\n- Fully customizable loader\r\n- Manipulate entries' properties\r\n- Uses the [Google Feed API](https://developers.google.com/feed/) to retrieve feeds\r\n\r\nBasic usage\r\n-----------\r\n\r\nDownload the [production version](https://raw.github.com/camagu/jquery-feeds/master/jquery.feeds.min.js) or the [development version](https://raw.github.com/camagu/jquery-feeds/master/jquery.feeds.js) and add it to your site:\r\n\r\n```html\r\n<script src=\"jquery.js\"></script>\r\n<script src=\"jquery.feeds.js\"></script>\r\n```\r\n\r\nAnd attach some feeds to a container:\r\n\r\n```javascript\r\n$('#container').feeds({\r\n\tfeeds: {\r\n\t\tfeed1: 'http://url/to/rss/feed',\r\n\t\tfeed2: 'http://url/to/another/rss/feed'\r\n\t\t// key: 'url', ...\r\n\t}\r\n});\r\n```\r\n\t\r\nThe feeds' keys (i.e. *feed1* and *feed2* in the example) are used to identify the source of the entries. You can use any alphanum string as a key but try to keep them short and descriptive (e.g. *google*, *jquery*, *smashingmag*).\r\n\r\n-----------------------------------------------------------------------------------------------------------------------\r\n\r\nYou can also set the max number of items for each feed by using the *max* option:\r\n\r\n```javascript\r\n$('#container').feeds({\r\n\tfeeds: {\r\n\t\t// Your feeds ...\r\n\t},\r\n    max: 3\r\n});\r\n```\r\n\r\nBy default *max* is set to -1, which means it should fetch the maximum number of entries supported by the Google Feed API (which is 100).\r\n\r\n*__Note:__ the more feeds you load and the more entries you get the longer it will take the plugin to load them.*\r\n\r\nManipulating entries\r\n--------------------\r\n\r\nYou can manipulate the properties of each entry by implementing the *preprocess* callback. Say you want to modify the entries' *publishedDate* format (inside the callback *this* corresponds to the current entry):\r\n\r\n```javascript\r\n$('#container').feeds({\r\n    feeds: {\r\n        // Your feeds ...\r\n    },\r\n    preprocess: function ( feed ) {\r\n        // Change the publishedDate format from UTC to dd-mm-yyyy\r\n        var date = new Date(this.publishedDate);\r\n        var pieces = [date.getDate(), date.getMonth(), date.getFullYear()]\r\n        this.publishedDate = pieces.join('-');\r\n    }\r\n});\r\n```\r\n\r\n*__Tip:__ you can use js libraries such as [moment.js](http://momentjs.com) to format your dates.*\r\n\r\nAvailable properties are:\r\n\r\n- title\r\n- publishedDate\r\n- content\r\n- contentSnippet (< 120 characters, no html tags)\r\n- link\r\n- mediaGroup\r\n- categories\r\n- source (the feed identifier, added by the plugin)\r\n- feedUrl (the url of the rss feed)\r\n- feedTitle (the title of the feed)\r\n- feedLink (the url of the HTML version of the feed)\r\n- feedDescription (the feed description)\r\n- feedAuthor (the feed author)\r\n\r\nRefer to the [Google developer's guide](https://developers.google.com/feed/v1/jsondevguide#resultJson) for more information.\r\n\r\nonComplete callback\r\n-------------------\r\n\r\nBy implementing the *onComplete* callback you can manipulate the container after the entries are rendered. Say you want to change all the anchors' *target* value to *_blank* (inside the callback *this* corresponds to the container):\r\n\r\n```javascript\r\n$('#container').feeds({\r\n    feeds: {\r\n        // Your feeds ...\r\n    },\r\n    onComplete: function (entries) {\r\n        $(this).find('a').attr('target', '_blank');\r\n    }\r\n});\r\n```\r\n    \r\nTemplating\r\n----------\r\n\r\nThe plugin uses a modified version of [John Resing](http://ejohn.org/)'s [JavaScript Micro-Templating](http://ejohn.org/blog/javascript-micro-templating/) function to render the entries.\r\n\r\nA template is a regular HTML string where you can execute or print javascript statements inside *<! ... !>* or *<!= ... !>* tags respectively.\r\n\r\n```html\r\n<article>\r\n\t<header>\r\n\t\t<h1><a href=\"<!=link!>\"><!=title!></a></h1>\r\n\t\t<p><!=publishedDate!></p>\r\n\t\t<! if (categories) { !>\r\n\t\t\t<ul>\r\n\t\t\t\t<! for (var i in categories) { !>\r\n\t\t\t\t\t<li><!=categories[i]!></li>\r\n\t\t\t\t<! } !>\r\n\t\t\t</ul>\r\n\t\t<! } !>\r\n\t</header>\r\n\t<div><!=contentSnippet!></div>\r\n\t<footer>\r\n\t\t<p>via: <a href=\"<!=feedLink!>\"><!=feedTitle!></a></p>\r\n\t</footer>\r\n</article>\r\n```\r\n\r\nAll the entry's properties are passed to the template as variables.\r\n\r\nTo use a template you could either pass it as a string to the *entryTemplate* option ...\r\n\r\n```javascript\r\n$('#container').feeds({\r\n    feeds: {\r\n        // Your feeds ...\r\n    },\r\n\tentryTemplate: '<p><!=title!></p>'\r\n});\r\n```\r\n\r\n... or you could write it inside a *script* tag which *type* is set to *text/html* and pass it's *id* to the *entryTemplate* option:\r\n\r\n```html\r\n<script type=\"text/html\" id=\"exampleTemplate\">\r\n\t<p><!=title!></p>\r\n</script>\r\n```\r\n\r\n```javascript\r\n$('#container').feeds({\r\n    feeds: {\r\n        // Your feeds ...\r\n    },\r\n\tentryTemplate: 'exampleTemplate'\r\n});\r\n```\r\n\r\n### Custom callback\r\n\r\nAlternatively, you can pass a function to *entryTemplate*. You can use this option to:\r\n\r\n- use different templates based on some arbitrary logic\r\n- use external template engines (e.g. [handlebars](http://handlebarsjs.com/), [jsrender](https://github.com/BorisMoore/jsrender/), [jqote](http://aefxx.com/))\r\n- define your own presentation logic\r\n\r\nExamples:\r\n\r\n```javascript\r\n// Use different templates based on source\r\n$('#container').feeds({\r\n\tfeeds: {\r\n\t\tblog: 'http://url/to/blog',\r\n\t\ttwitter: 'http://url/to/twitter/feed'\r\n\t},\r\n\tentryTemplate: function(entry) {\r\n\t\tvar template = '';\r\n\t\t\r\n\t\tif (entry.source == 'blog') {\r\n\t\t\t// Full view for blog entry\r\n\t\t\ttemplate =\t'<div>' +\r\n\t\t\t\t\t\t'<h1><a href=\"<!=link!>\"><!=title!></a></h1>' +\r\n\t\t\t\t\t\t'<p><!=publishedDate!></p>' +\r\n\t\t\t\t\t\t'<div><!=contentSnippet!></div>';\r\n\t\t} else if (entry.source == 'twitter') {\r\n\t\t\t// Just the content for twitter entries\r\n\t\t\ttemplate = '<div><!=content!></div>';\r\n\t\t}\r\n\t\t\r\n\t\t// Render the template\r\n\t\treturn this.tmpl(template, entry);\r\n\t}\r\n});\r\n```\r\n\r\n```javascript\r\n// Using jsrender instead of built-in template function\r\n$('#container').feeds({\r\n\tfeeds: {\r\n\t\t// Your feeds ...\r\n\t},\r\n\tentryTemplate: function(entry) {\r\n\t\treturn $('#myJsrenderTemplate').render(entry);\r\n\t}\r\n});\r\n```\r\n\r\n```javascript\r\n// Using your own presentation logic\r\n$('#container').feeds({\r\n\tfeeds: {\r\n\t\t// Your feeds ...\r\n\t},\r\n\tentryTemplate: function(entry) {\r\n\t\treturn '<p>' + entry.title + '</p>';\r\n\t}\r\n});\r\n```\r\n\r\n--------------------------------------------------------------------------------------------------------------------------\r\n\r\nYou can change the loader template as well by passing a template, it's *id* or a callback to the *loadingTemplate* option:\r\n\r\n```javascript\r\n$('#container').feeds({\r\n    feeds: {\r\n        // Your feeds ...\r\n    },\r\n    loadingTemplate: '<p>Fetching entries, please wait.</p>'\r\n});\r\n```\r\n    \r\nOptions\r\n-------\r\n\r\n```javascript\r\n// Feeds to retrieve\r\nfeeds: {\r\n    // identifier: url, ...\r\n},\r\n\r\n// Maximum number of entries to fetch per feed, -1 for maximum available\r\nmax: -1,\r\n\r\n// Use SSL connection. Option;\r\n//\t- true: use https\r\n//\t- false: use http\r\n//\t- 'auto': use same as current domain\r\nssl: 'auto',\r\n\r\n// Called when all entries are rendered\r\nonComplete: function( entries ) { },\r\n\r\n// Called for each entry\r\npreprocess: function( feed ) { },\r\n\r\n// Template injected to container while feeds are loaded\r\nloadingTemplate: '<p class=\"feeds-loader\">Loading entries ...</p>',\r\n\r\n// Template used to render each entry\r\nentryTemplate:\t'<div class=\"feeds-entry feeds-source-<!=source!>\">' + \r\n\t\t\t\t'<a class=\"feed-entry-title\" target=\"_blank\" href=\"<!=link!>\" title=\"<!=title!>\"><!=title!></a>' +\r\n\t\t\t\t'<div class=\"feed-entry-date\"><!=publishedDate!></div>' + \r\n\t\t\t\t'<div class=\"feed-entry-content\"><!=contentSnippet!></div>' + \r\n\t\t\t\t'</div>'\r\n```\r\n\r\nChangelog\r\n---------\r\n\r\n**v0.5**\r\n\r\nNo changes where made to the code but the package got revamped!\r\n\r\n- Removed 'libs' directory, using CDN instead\r\n- Renamed test files to 'index.html' and 'tests.js'\r\n- Organized tests\r\n- Revamped 'dist' banner\r\n- Removed lincese files, lincese links were included in the banner\r\n- Moved 'dist' files to root\r\n- Moved 'package.json' to 'feeds.jquery.json' (plugins.jquery.com compatible)\r\n- Plugin info was tuned\r\n- Modified 'grunt.js' to reflect the changes\r\n\r\n**v0.4.1**\r\n- Added *ssl* option\r\n\r\n**v0.4**\r\n- Implemented alternative use of *entryTemplate* and *loadingTemplate* as callback\r\n\r\n**v0.3**\r\n- Rewrote templating system\r\n\r\n**v0.2**\r\n- Cloned publishedDate property to avoid sorting problems\r\n- Added feed data to entries\r\n \r\n**v0.1**\r\n- First version\r\n                  \r\nLicense\r\n-------\r\n\r\nCopyright (c) 2012 Camilo Aguilar\r\n\r\nDual licensed under the MIT and GPL licenses:\r\n\r\n- http://www.opensource.org/licenses/mit-license.php\r\n- http://www.gnu.org/licenses/gpl.html\r\n\r\nIncludes a modified version of [Simple JavaScript Templating](http://ejohn.org/blog/javascript-micro-templating/)\r\n\r\n- Copyright (c) John Resig (http://ejohn.org), MIT licensed\r\n\r\nContributing\r\n------------\r\n\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [grunt](https://github.com/cowboy/grunt).\r\n\r\nPlease don't edit files in the root directory as they are generated via grunt. You'll find source code in the `src` subdirectory!","google":""}